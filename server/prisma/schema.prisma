generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Course {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  semesters    Semester[]
  numSemesters Int        @default(3)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
}

model Semester {
  id        Int       @id @default(autoincrement())
  title     String
  courseId  Int       
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// QUIZ 
// Will be 344 quizzes ending on same data
model Exam {
  id          Int            @id @default(autoincrement())
  title       String         @default("") @db.VarChar(35)
  metaTitle   String         @default("") @db.VarChar(100) // SEO
  slug        String         @default("") @db.VarChar(100) // Form URL
  summary     String         @default("") @db.VarChar(250)
  type        Int            @default(0)
  score       Int            @default(0) // Total score available
  metaData    ExamMeta?
  questions   ExamQuestion[] // Questions
  answers     ExamAnswer[] // Questions
  takeTable   TakeTable[] // Questions
  bugReports  BugReport[]
  userId      String         @unique
  user        User           @relation(fields: [userId], references: [id])
  createdAt   DateTime       @default(now())
  publishedAt DateTime?
  endDate     DateTime?
  updatedAt   DateTime?      @updatedAt
}

model ExamMeta {
  id        Int       @id @default(autoincrement())
  key       String    @default("") @db.VarChar(50) // Id info
  content   String    @default("") @db.VarChar(150) // SEO data
  examId    Int       @unique
  exam      Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ExamQuestion {
  id        Int       @id @default(autoincrement())
  type      String    @default("") @db.VarChar(30)
  active    Boolean   @default(true)
  score     Int       @default(1)
  content   String    @default("") @db.VarChar(5000)
  examId    Int       @unique
  exam      Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ExamAnswer {
  id         Int       @id @default(autoincrement())
  questionId Int
  active     Boolean   @default(true) // Is the question visible to users
  correct    Boolean   @default(true) // Did they answer correctly
  content    String[] // One or multiple answers
  examId     Int       @unique
  exam       Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

// Speed and accuracy data of quiz
model TakeTable {
  id         Int       @id @default(autoincrement())
  userId     String
  status     String // The status of the take. It can be enrolled, started, paused, finished, declared.
  score      Int // Score 	The total score obtained by the user.
  examId     Int       @unique
  exam       Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  startAt    DateTime
  finishedAt DateTime?
  content    String? // The column used to store the take remarks.
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

// Bug report for quiz
model BugReport {
  id         Int      @id @default(autoincrement())
  userId     String?
  questionId Int?
  content    String   @default("") @db.VarChar(1000)
  screenshot String?
  viewed     Boolean  @default(false) // Is the question visible to users
  fixed      Boolean  @default(false) // Is the question visible to users
  examId     Int      @unique
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

// USERS
enum Role {
  USER
  ADMIN
  DEVELOPER
}

model User {
  id             String            @id @default(uuid())
  email          String            @unique
  password       String            @db.VarChar(250)
  role           Role              @default(USER)
  profile        Profile?
  // comments       Comment[]
  // likes          Like[]
  exams          Exam[]
  notifications  Notification[]
  badges         Badge[]
  puchaseHistory PuchaseHistory[]
  loginData      LoginData[]
  review         Review?
  complaints     Complaint?
  passwordReset  PasswordReset?
  verifications  UserVerification?
  lastLoggedIn   DateTime          @updatedAt
  isVerified     Boolean           @default(false)
  agreedToTerms  Boolean           @default(false)
  isActive       Boolean           @default(true)
  createdEvents  Event[]           @relation("createdEvents")
  receivedEvents Event[]           @relation("receivedEvents")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
}

model LoginData {
  id        String   @id @default(uuid())
  userId    String   @unique
  device    String?
  location  String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Profile {
  id            String            @id @default(uuid())
  userId        String            @unique
  user          User              @relation(fields: [userId], references: [id])
  username      String            @unique @db.VarChar(28)
  city          String?           @db.VarChar(100)
  country       String            @default("Earth")
  gender        String?
  dob           DateTime          @default(now())
  mediaAccounts SocialMediaLink[]
  firstName     String            @default("") @db.VarChar(50)
  lastName      String?           @default("") @db.VarChar(50)
  bio           String?           @default("") @db.VarChar(1000)
  profileImage  String?           @default("https://www.pngfind.com/pngs/m/676-6764065_default-profile-picture-transparent-hd-png-download.png")
  isPrivate     Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
}

model SocialMediaLink {
  id        String    @id @default(uuid())
  name      String
  url       String
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Badge {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(50)
  reward    String
  icon      String
  image     String
  message   String    @db.VarChar(250)
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserVerification {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model PuchaseHistory {
  id        String   @id @default(uuid())
  title     String   @default("")
  order     String
  amount    Int
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model PasswordReset {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

enum NotificationType {
  PURCHASE
  MESSAGE
  OFFER
  GAME
  HIGHSCORE
  NEWS
  TEST
  UPDATE
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  content   String           @db.VarChar(250)
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewed    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
}

// Website Data
model Contact {
  id        String    @id @default(uuid())
  email     String    @unique
  phone     String    @default("")
  firstName String    @default("")
  lastName  String    @default("")
  country   String    @default("")
  message   String    @default("")
  viewed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Review {
  id        String    @id @default(uuid())
  value     Int
  email     String    @unique
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])
  viewed    Boolean   @default(false)
  content   String
  image     String?
  url       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Complaint {
  id        String    @id @default(uuid())
  email     String    @unique
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])
  content   String
  viewed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

// model Comment {
//   id        String        @id @default(uuid())
//   content   String        @db.VarChar(250)
//   userId    String
//   user      User          @relation(fields: [userId], references: [id])
//   postId    String
//   likes     CommentLike[]
//   parentId  String?
//   parent    Comment?      @relation("replies", fields: [parentId], references: [id])
//   replies   Comment[]     @relation("replies")
//   createdAt DateTime      @default(now())
//   updatedAt DateTime?     @updatedAt
// }

// model Like {
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([userId, postId])
// }

// model CommentLike {
//   userId    String
//   user      User    @relation(fields: [userId], references: [id])
//   commentId String
//   comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

//   @@unique([userId, commentId])
// }
